colorscheme palenight

set-option global tabstop 4
set-option global indentwidth 4
# Always keep one line and three columns displayed around the cursor
set-option global scrolloff 8,3

set-option global windowing_modules 'wezterm'

# Display the status bar on top # disable the clippy
set-option global ui_options terminal_assistant=off terminal_status_on_top=true

# Display line numbers (  ss )   - { -- }
# add -relative to make it relative
add-highlighter global/number-lines number-lines -hlcursor -min-digits 3

# matching brackets
add-highlighter global/ show-matching

# Highlight trailing whitespace
add-highlighter global/trailing-whitespace regex '\h+$' 0:Information

# Softwrap long lines
add-highlighter global/ wrap -word -indent

#- KEYBINDINGS -#
map global normal <c-s> ': save-buffer<ret>'
map global insert <c-s> '<esc>: save-buffer<ret>i'

map -docstring "Select line without trailing new line" global normal <a-x> x<a-:>H

declare-user-mode window
map global window z ':q!<ret>' -docstring 'Quit no save'
map global window a ':qa!<ret>' -docstring 'Quit no save all'
map global window s ':wq<ret>' -docstring 'Save Quit'
map global window q ':q<ret>' -docstring 'Save Quit'
map global window c ':db<ret>' -docstring 'Close'
map global window w ':bn<ret>' -docstring 'Next'
map global normal <c-w> ":enter-user-mode window<ret>" -docstring "Window"

## INSERT ##
# Minimal set of readline mappings
map -docstring "move the cursor to the start of the line"        global insert <c-a> '<a-;>gh'
map -docstring "move the cursor to the end of the line"          global insert <c-e> '<esc>glli'
map -docstring "delete the character under the anchor"           global insert <c-d> '<a-;>c'
map -docstring "delete from the cursor to the start of the line" global insert <c-u> '<esc>h<a-h>c'
map -docstring "delete from the cursor to the end of the line"   global insert <c-k> '<esc><a-l>c'
map -docstring "delete until the next word boundary"             global insert <a-d> '<esc>ec'
map -docstring "delete until the previous word boundary"         global insert <c-w> '<esc>bc'
map -docstring "paste before the cursor"                         global insert <c-y> '<esc>Pi'

map global insert <s-ret> <ret>

## GLOBAL NORMAL ##

# unselect on <esc>
map global normal <esc> ";,"
# comment lines
map global normal "#" ":comment-line<ret>"
map global normal '<a-#>' '_: comment-block<ret>'

map global normal = ': prompt qalc: %{exec "a%val{text}<lt>esc>|qalc -t -u8 -f -<lt>ret>"}<ret>'

## USER MODE LEADER ##

### Clipboard management mappings
map -docstring "yank the selection into the clipboard" global user y "<a-|> xsel -i -b<ret>"
map -docstring "paste the clipboard" global user p "<a-!> xsel<ret>"

### Buffers
# map -docstring "close current buffer" global user c ": db<ret>"
map -docstring "goto previous buffer" global user , ": bp<ret>"
map -docstring "goto next buffer" global user . ": bn<ret>"
### OPen Fuzzy finder
map -docstring "open fzf" global user F ": fzf-mode<ret>"
map -docstring "Popup" global user o ":fzf-popup<ret>"
map -docstring 'open file' global user O ':edit %sh{cd $(dirname $kak_buffile); zenity --file-selection}<ret>'

map global user -docstring 'select color' c '!zenity --color-selection<ret>'

map global user -docstring 'update exchange rates' X ':try %{ nop %sh{qalc -exrates}}<ret>'

map global user -docstring 'clean tabs and trailing whitespace in selections' c ':clean-selections<ret>'
map global user -docstring 'clean tabs and trailing whitespace in the buffer' C ':clean-buffer<ret>'


### Search
map -docstring "Case Insensitive Search" global user '/' '/(?i)'

### LSP MODE ###
#
map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

#- CUSTOM  COMMANDS -#
define-command save-buffer -docstring "save current buffer and show info"  %{
  write
  info "file saved at %sh{date}"
}

# Shortcut to quickly exit the editor
define-command -docstring "save and quit" x "write-all; quit"

# open tutor (needs curl)
define-command  trampoline -docstring "open a tutorial" %{
  evaluate-commands %sh{
    tramp_file=$(mktemp -t "kakoune-trampoline.XXXXXXXX")
    echo "edit -fifo $tramp_file *TRAMPOLINE*"
    curl -s https://raw.githubusercontent.com/mawww/kakoune/master/contrib/TRAMPOLINE -o "$tramp_file"
  }
}

# define-command find -menu -params 1 -shell-script-candidates %{ ag -g '' --ignore "$kak_opt_ignored_files" } %{ edit %arg{1} }

# define-command mkdir %{ nop %sh{ mkdir -p $(dirname $kak_buffile) } }

define-command delete-buffers-matching -params 1 %{
    evaluate-commands -buffer * %{
        evaluate-commands %sh{ case "$kak_buffile" in $1) echo "delete-buffer" ;; esac }
    }
}

define-command clean-selections -docstring 'Replace tabs with spaces and trim trailing whitespace' %{ try %{
    execute-keys -draft @s\h+$<ret>d
} }
define-command clean-buffer -docstring 'Replace tabs with spaces and trim trailing whitespace' %{ try %{
    execute-keys -draft \%@s\h+$<ret>d
} }

# clear search highlighter
define-command nohlsearch -docstring 'clear the search register' %{ set-register slash '' }
alias global nohl nohlsearch

# run external commands in a shell and show the output in an info box
define-command sh -docstring "run a shell command" -params .. %{ info -title "%arg{@}" %sh{${@} 2>&1 } }
complete-command sh shell

define-command broot -docstring "open broot" -params .. %{
    terminal sh -c "EDITOR=%opt{kak_open} KAK_SESSION=%val{session} KAK_CLIENT=%val{client} broot %arg{@}"
}
complete-command broot file


#- HOOKS-#

## for those who like autosave
# hook global ModeChange pop:insert:.* %{
# 	save-buffer
# }
## Soft wrap markdown
hook global WinSetOption filetype=markdown %{
  add-highlighter -override global/markdown-wrap wrap -word

  hook -once -always window WinSetOption filetype=.* %{
    remove-highlighter global/markdown-wrap
  }
}
# tabs for autocomplete
hook global InsertCompletionShow .* %{
  try %{
    # this command temporarily removes cursors preceded by whitespace;
    # if there are no cursors left, it raises an error, does not
    # continue to execute the mapping commands, and the error is eaten
    # by the `try` command so no warning appears.
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
    hook -once -always window InsertCompletionHide .* %{
      unmap window insert <tab> <c-n>
      unmap window insert <s-tab> <c-p>
    }
  }
}

# # Highlight current search
# # ────────────────────────

# set-face global CurSearch +u
# hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:CurSearch }
# hook global WinCreate ^[^*]+$ %{ add-highlighter window/ number-lines -hlcursor }

hook global WinSetOption filetype=python %{
    jedi-enable-autocomplete
    lsp-enable-window
    lsp-inlay-diagnostics-enable global
    lint-enable
    set-option global lintcmd 'flake8'
}

hook global WinSetOption filetype=(rust|javascript|typescript|c|markdown) %{
  lsp-enable-window
  lsp-inlay-diagnostics-enable global
}

# Highlight the word under the cursor
# ───────────────────────────────────

set-face global CurWord +u

hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec ,<a-i>w <a-k>\A\w+\z<ret>
        add-highlighter -override global/curword regex "\b\Q%val{selection}\E\b" 0:CurWord
    } catch %{
        add-highlighter -override global/curword group
    } }
}

# # Switch cursor color in insert mode
# # ──────────────────────────────────

# set-face global InsertCursor default,green+B

# hook global ModeChange .*:.*:insert %{
#     set-face window PrimaryCursor InsertCursor
#     set-face window PrimaryCursorEol InsertCursor
# }

# hook global ModeChange .*:insert:.* %{ try %{
#     unset-face window PrimaryCursor
#     unset-face window PrimaryCursorEol
# } }


#- PLUGINS -#
evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload

evaluate-commands %sh{ kak-tree-sitter -dks --session $kak_session }
# plug "catppuccin/kakoune" theme config %{
# 	colorscheme catppuccin_mocha
# }
# plug "delapouite/kakoune-text-objects"
plug "alexherbo2/auto-pairs.kak" config %{
  enable-auto-pairs
}
# fzf
# https://github.com/secondary-smiles/lat
# use `lat -r` in place of bat?
plug "andreyorst/fzf.kak" config %{
  require-module fzf
  require-module fzf-grep
  require-module fzf-file
} defer fzf %{
  set-option global fzf_highlight_command "bat {}"
} defer fzf-file %{
  set-option global fzf_file_command "fd . --no-ignore-vcs"
} defer fzf-grep %{
  set-option global fzf_grep_command "fd"
}

# # Get the nice x from Helix
plug "evanrelf/byline.kak" config %{
  require-module "byline"
}

# Support lua plugins
plug "gustavo-hms/luar" %{
 require-module luar
 plug "gustavo-hms/peneira" %{
    require-module peneira
 }
 plug "https://codeberg.org/mbauhardt/peneira-filters" config %{
    map global user f ': peneira-filters-mode<ret>' -docstring 'Peneira'
 }
}
set-option global luar_interpreter luajit

# plug "andreyorst/powerline.kak" defer kakoune-themes %{
#   powerline-theme pastel
# } defer powerline %{
#   powerline-format global "git lsp bufname filetype mode_info lsp line_column position"
#   set-option global powerline_separator_thin ""
#   set-option global powerline_separator ""
# } config %{
#   powerline-start
# }

# LSP?
plug "kak-lsp/kak-lsp" do %{
  cargo install --locked --force --path .
  mkdir -p ~/.config/kak-lsp
  cp -n kak-lsp.toml ~/.config/kak-lsp/
}

# buffer management
plug 'delapouite/kakoune-buffers' %{
  map global user b ':enter-buffers-mode<ret>'              -docstring 'buffers…'
  map global user B ':enter-user-mode -lock buffers<ret>'   -docstring 'buffers (lock)…'
}
hook global WinDisplay .* info-buffers
alias global bd delete-buffer
alias global bf buffer-first
alias global bl buffer-last
alias global bo buffer-only
alias global bo! buffer-only-force

# Phantom select
# ? plug 'occivink/kakoune-phantom-selection' %{
# 
# }

# Surround
plug 'h-youhei/kakoune-surround' %{
    declare-user-mode surround
    map global surround s ':surround<ret>' -docstring 'surround'
    map global surround c ':change-surround<ret>' -docstring 'change'
    map global surround d ':delete-surround<ret>' -docstring 'delete'
    map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'
    map global user s ':enter-user-mode surround<ret>' -docstring 'surround'
}

#mark word
plug "https://gitlab.com/fsub/kakoune-mark"
map global user m :mark-word<ret> -docstring "mark"
map global user M :mark-clear<ret> -docstring 'mark clear'

plug "danr/kakoune-easymotion"

# find replace
plug "occivink/kakoune-find"

# inc-dec numbers
plug "https://gitlab.com/Screwtapello/kakoune-inc-dec"

# inc-dec numbers bind
map -docstring "increment number" global normal <c-a> ": inc-dec-modify-numbers + 1<ret>"
map -docstring "decrement number" global normal <c-x> ": inc-dec-modify-numbers - 1<ret>"

# smarttab
plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop 4
} config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|python|lua) expandtab
    # these languages will use `noexpandtab' behavior
    hook global WinSetOption filetype=(makefile|gas|go) noexpandtab
    # these languages will use `smarttab' behavior
    hook global WinSetOption filetype=(c|cpp) smarttab
}

plug "tom-huntington/simple-git-gutter.kak"
plug 'occivink/kakoune-sudo-write'
# plug 'delapouite/kakoune-auto-percent'

plug chambln/kakoune-kit config %{
    map global user g ': git status -bs<ret>' -docstring 'git status'
    hook global WinSetOption filetype=git-status %{
        map window normal c ': git commit --verbose '
        map window normal l ': git log --oneline --graph -- <c-x>f'
        map window normal d ': -- %val{selections}<a-!><home> git diff '
        map window normal D ': -- %val{selections}<a-!><home> git diff --cached '
        map window normal a ': -- %val{selections}<a-!><home> git add '
        map window normal A ': -- %val{selections}<a-!><home> terminal git add -p '
        map window normal r ': -- %val{selections}<a-!><home> git reset '
        map window normal R ': -- %val{selections}<a-!><home> terminal git reset -p '
        map window normal o ': -- %val{selections}<a-!><home> git checkout '
    }
    hook global WinSetOption filetype=git-log %{
        map window normal d     ': %val{selections}<a-!><home> git diff '
        map window normal <ret> ': %val{selections}<a-!><home> git show '
        map window normal r     ': %val{selections}<a-!><home> git reset '
        map window normal R     ': %val{selections}<a-!><home> terminal git reset -p '
        map window normal o     ': %val{selections}<a-!><home> git checkout '
    }
}

plug "caksoylar/kakoune-focus" config %{
     # configuration here
}

plug "eburghar/kakship" do %{
	cargo install --force --path . --root ~/.local
	[ ! -e $kak_config/starship.toml ] && cp starship.toml $kak_config/
} config %{
	kakship-enable
}

# plug 'delapouite/kakoune-i3' %{
#   # Suggested mapping
#   map global user 3 ': enter-user-mode i3<ret>' -docstring 'i3 mode'
# }

plug 'greenfork/active-window.kak'

plug 'insipx/kak-crosshairs' %{
   map global user x ': crosshairs<ret>' -docstring 'X column/line'
   crosshairs
}

plug 'delapouite/kakoune-cd' %{
  # Suggested mapping
  map global user d ': enter-user-mode cd<ret>' -docstring 'cd'
  # Suggested aliases
  alias global cdb change-directory-current-buffer
  alias global cdr change-directory-project-root
  alias global ecd edit-current-buffer-directory
  alias global pwd print-working-directory
}

# $ cargo install kak-subvert
declare-user-mode subvert
map global user v ':enter-user-mode subvert<ret>' -docstring 'enter subvert user mode'
map global subvert a '<esc>| kak-subvert ada <ret>' -docstring 'convert to Ada case'
map global subvert c '<esc>| kak-subvert camel <ret>' -docstring 'convert to camel case'
map global subvert k '<esc>| kak-subvert kebab <ret>' -docstring 'convert to kebab case'
map global subvert p '<esc>| kak-subvert pascal <ret>' -docstring 'convert to pascal case'
map global subvert . '<esc>| kak-subvert sentence <ret>' -docstring 'convert to sentence case'
map global subvert s '<esc>| kak-subvert snake <ret>' -docstring 'convert to snake case'
map global subvert S '<esc>| kak-subvert screaming <ret>' -docstring 'convert to screaming case'
map global subvert t '<esc>| kak-subvert train <ret>' -docstring 'convert to train case'
map global subvert T '<esc>| kak-subvert title <ret>' -docstring 'convert to title case'

# find*replacie
# Write the edits you would like to make in the *grep* buffer.
# Then, call grep-write and the changes will be applied to their respective files.
plug "JacobTravers/grep-write.kak"

plug "maximbaz/restclient.kak" defer restclient %{
    set-option global restclient_copy_command 'xsel'
    declare-user-mode rest 
    map global rest x ': restclient-execute<ret>' -docstring 'Request'
    map global rest c ': restclient-copy-curl<ret>' -docstring 'Curl'
    map global user r ": enter-user-mode rest<ret>"
}
plug 'Anomalocaridid/wezterm.kak' %{
    wezterm-integration-enable
}

plug 'raiguard/kak-harpoon' %{
    harpoon-add-bindings
}

plug 'Delapouite/kakoune-registers'
plug 'occivink/kakoune-sort-selections'

plug "evanrelf/number-toggle.kak" config %{
  require-module "number-toggle"
  # Example of enabling `-hlcursor` and `-separator ' '` parameters
  set-option global number_toggle_params -hlcursor
}

plug "abuffseagull/kakoune-toggler" do %{ cargo install --path . } config %{
    map global user t ': toggle-word<ret>' -docstring 'toggle word'
    map global user T ': toggle-WORD<ret>' -docstring 'toggle WORD'
}

plug "matthias-margush/tug"
plug "Delapouite/kakoune-auto-star"
plug 'casonadams/insert-indicator'
plug "krornus/kakoune-toggle-map" %{
    plug "krornus/kakoune-hlsearch" %{
        toggle-map global normal <F3> hlsearch-on hlsearch-off
    }
}
plug 'uniquepointer/pastebin.kak' %{
    map global normal <a-y> ': enter-pastebin-mode<ret>' -docstring 'pastebin'
}

plug 'https://gitlab.com/kstr0k/mru-files.kak.git' %{
  # optional customization: set these *before* plugin loads
  #set global mru_files_history %sh{echo "$HOME/.local/share/kak/mru.txt"}
} demand mru-files %{  # %{} needed even if empty
  # suggested mappings: *after* plugin loads
  # think "go alt[ernate]-f[iles]"
  map global goto <a-f> '<esc>: mru-files ' -docstring 'mru-files'
  map global goto <a-F> '<esc>: mru-files-related<ret>' -docstring 'mru-files-related'

  # maybe customize kakhist_*: max, file, ignore_sh etc
require-module kakhist; kakhist-init
# suggested mappings
map global goto ':' '<esc>: kakhist-buf-show<ret>' \
  -docstring 'show command history'

}

plug "natasky/kakoune-multi-file"

plug 'delapouite/kakoune-livedown'

plug "https://gitlab.com/Screwtapello/kakoune-state-save" %{
hook global KakBegin .* %{
    state-save-reg-load colon
    state-save-reg-load pipe
    state-save-reg-load slash
    state-save-reg-load dquote
}

hook global KakEnd .* %{
    state-save-reg-save colon
    state-save-reg-save pipe
    state-save-reg-save slash
    state-save-reg-save dquote
}

hook global FocusOut .* %{ state-save-reg-save dquote }
hook global FocusIn  .* %{ state-save-reg-load dquote }

} 

# cargo install kak-popup
# popup --title open --kak-script %{edit %opt{popup_output}} -- fzf
define-command fzf-popup -docstring 'Popup FZF' %{
popup --title open --kak-script %{edit %opt{popup_output}} -- "fzf --preview 'bat --style=numbers --color=always --line-range :500 {}' --bind shift-up:preview-page-up,shift-down:preview-page-down"
}

define-command fzf-popup-selection -docstring 'Popup Selecton' %{
popup --title selection --kak-script %{edit %opt{popup_output}} -- "rg aaa --line-number --no-heading --color=always --smart-case | fzf -d ':' -n 2.. --ansi --no-sort --preview-window 'down:20%:+{2}' --preview 'bat --style=numbers --color=always --highlight-line {2} {1}'"
}

# plug 'enricozb/tabs.kak'
# set-option global tabs_modelinefmt '%val{cursor_line}:%val{cursor_char_column} {{mode_info}} '
# set-option global tabs_options --minified

evaluate-commands %sh{kak-popup init}

declare-option int textwidth 83
addhl global/ column '%opt{textwidth}' default,rgb:404040
hook global WinSetOption filetype=mail %{
    set window textwidth 72
}

add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb
set-option -add global modelinefmt '%sh{printf "﬘->%s"  $(printf %s\\n $kak_buflist |wc -w) }'
# TODO: Load local Kakoune config file if it exists
# ───────────────────────────────────────────

evaluate-commands %sh{ [ -f $kak_config/local.kak ] && echo "source $kak_config/local.kak" }

