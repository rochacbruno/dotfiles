#!/bin/sh

set -e

mv "$@"
result=$?

# Not running in connect.kak
if [ "$result" -ne 0 ]||
   [ -z "$KAKOUNE_SESSION" ] ||
   [ -z "$KAKOUNE_CLIENT" ] ||
   [ -z "$KAKOUNE_CONNECT_PATH" ] ||
   ! [ -e "$KAKOUNE_CONNECT_PATH/functions/prelude.sh" ]
then
  exit $result
fi

# Running in kak: the rest of the script will synchronize open buffers that were moved

# This provides kak_escape
# shellcheck disable=SC1090
. "$KAKOUNE_CONNECT_PATH/functions/prelude.sh"

# Discard flags, then $@ is the list of files
for arg
do
  case $arg in
    --) shift; break ;;
    -*) shift ;;
    *)  break ;;
  esac
done

# Canonicalize filenames
for file
do
  path=$(realpath "$file")
  set -- "$@" "$path"
  shift
done

# Get details of the active buffer in each kak client, to restore it later.
# Construct two parallel lists:
# - client_list: list of kak clients fur the current session
# - active_buffiles: visible buffers
for target; do :; done
client_list=$(get '%val{client_list}')
active_buffiles=''
for client in $client_list
do
  active_buffile=$(KAKOUNE_CLIENT="$client" get '%val{buffile}')

  i=1; while [ $i -lt $# ] # Loop over all but the last arg (target)
  do # Check whether the active buffer is one that was renamed.
    file="$1"
    if [ "$file" = "$active_buffile" ]
    then # This mv source file is a displayed buffer
      # Change active_buffile to the file's new name
      if [ -d "$target" ]
      then
        active_buffile="${active_buffile##*/}"
        active_buffile="$target/$active_buffile"
      else
        active_buffile="$target"
      fi
    else # This mv src is not displayed in a buffer
      active_buffile='.' # Using . as a sentinel value, to check for later
    fi
    set -- "$@" "$1"; shift
    i=$((i+1))
  done
  set -- "$@" "$1"; shift # Rotate the last arg; back at the start

  # Add this client's active buffer to the list
  # Newline separate the buffers
  active_buffiles=$(printf '%s\n%s' "$active_buffiles" "$active_buffile")
done

# Escape filenames to send to kak
for file
do
  escaped_path=$(echo "$file" | sed -e "s/'/'\\\\''/g; 1s/^/'/; \$s/\$/'/")
  set -- "$@" "$escaped_path"
  shift
done

# Send off the list of paths to sync with open buffers
kak_escape evaluate-commands -buffer \* tug-mv-sync "$*" | kak -p "$KAKOUNE_SESSION"

# Now need to make the previously active buffers active again

# Clear out the arg array, repopulate with active buffer list
for arg; do shift; done
IFS='
'
for file in $active_buffiles
do
  set -- "$@" "$file"
done

# Update each client's active buffer to the newly renamed files
IFS=' '
for client in $client_list
do
  file="$1"; shift
  if [ "$file" != '.' ] # Sentinel value indicates no update
  then
    KAKOUNE_CLIENT="$client" edit "$file"
  fi
done
