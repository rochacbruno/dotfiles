## OPTIONS ##
theme = "catppuccin_mocha"

[editor]
line-number = "relative"
cursorline = false
color-modes = true
cursorcolumn = false
rulers = [80, 100]
bufferline = "always"
auto-format = false

[editor.search]
smart-case = false

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.file-picker]
hidden = false
git-global = false # show files hidden by git globally
max-depth = 20

[editor.indent-guides]
render = true

#[editor.whitespace]
#render = "all"
# or control each character
[editor.whitespace.render]
space = "none"
tab = "all"
newline = "none"
tabpad = "all"

[editor.whitespace.characters]
space = "·"
nbsp = "⍽"
tab = "→"
newline = "⏎"
tabpad = "·"  # Tabs will look like "→···" (depending on tab width)

[editor.lsp]
enable = true
display-messages = true
display-inlay-hints = true


## KEYBINDINGS ##
[keys.normal]
# Save if changed
C-s = ":update"
# Move selection content UP/Down
C-j = ["extend_to_line_bounds", "delete_selection", "paste_after"]
C-k = [
  "extend_to_line_bounds",
  "delete_selection",
  "move_line_up",
  "paste_before",
]
# Deletes to the end of the line - same as vgld
"D" = ["ensure_selections_forward", "extend_to_line_end", "delete_selection"]

# o and O gets back to normal after adding a new line, great for pasting
o = ["open_below", "normal_mode"]
O = ["open_above", "normal_mode"]

# Vim muscle memory that doesn´t conflict on Helix
0 = "goto_line_start"
"^" = "goto_first_nonwhitespace"
V = ["select_mode", "extend_to_line_bounds"]
backspace = ["move_line_up", "goto_line_end"]
ret = ["move_line_down", "goto_first_nonwhitespace"]

# Search for word under cursor
"*" = [
  "move_char_right",
  "move_prev_word_start",
  "move_next_word_end",
  "search_selection",
  "search_next",
]
"#" = [
  "move_char_right",
  "move_prev_word_start",
  "move_next_word_end",
  "search_selection",
  "search_prev",
]

# Escape the madness! No more fighting with the cursor! Or with multiple cursors!
esc = ["collapse_selection", "keep_primary_selection"]

[keys.normal.space]
w = ":write"
q = ":quit"
c = ":bc"    # Close buffer
F = "no_op"

# Add comma to the end of the line
"," = [
  "save_selection",
  "goto_line_end",
  ":append-output echo ','",
  "collapse_selection",
  "delete_selection",
  "jump_backward",
  "normal_mode",
]
# Add semicolumn to the end of the line
";" = [
  "save_selection",
  "goto_line_end",
  ":append-output echo ';'",
  "collapse_selection",
  "delete_selection",
  "jump_backward",
  "normal_mode",
]
# Add # comment to the end of the line
"#" = [
  "save_selection",
  "goto_line_end",
  ":append-output echo '  # '",
  "collapse_selection",
  "delete_selection",
  "insert_mode",
]

[keys.normal.space."="]
"f" = ":format"
"b" = ":pipe black --quiet -"
"i" = ":pipe isort --quiet -m 3 --profile=black -"

# Editor Actions
[keys.normal.space.e]
o = ":open ~/.config/helix/config.toml" # Maps Ctrl-o to opening of the helix config file
r = ":config-reload"
s = "save_selection"                    # Add selection to the Jumplist
l = ":lsp-restart"
c = ":toggle-option search.smart-case"
w = ":toggle-option auto-info"
i = ":toggle lsp.display-inlay-hints"

# File management
[keys.normal.space.f]
f = "file_picker"
F = "file_picker_in_current_directory"
b = "file_picker_in_current_buffer_directory"
"." = ":toggle-option file-picker.git-ignore" # toggle seeing files hidden with the .gitignore in file pickers

[keys.insert]
j = { k = "normal_mode" } # Maps `jk` to exit insert mode
# Force undo checkpoint (note: granular history is Alt-u/U, undo is u/U)
A-s = "commit_undo_checkpoint"
# Save if changed
C-s = ":update"
esc = ["collapse_selection", "normal_mode"]

# Emacs style navigation on insert mode
A-b = ["move_prev_word_start", "collapse_selection"]
A-f = ["move_next_word_end", "move_char_right"]
C-a = "goto_first_nonwhitespace"
C-b = "move_char_left"
# C-d = "delete_char_forward"
C-e = "goto_line_end_newline"
C-f = "move_char_right"
C-n = "move_line_down"
C-p = "move_line_up"

[keys.select]
# Muscle memory
"{" = ["extend_to_line_bounds", "goto_prev_paragraph"]
"}" = ["extend_to_line_bounds", "goto_next_paragraph"]
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
D = ["extend_to_line_bounds", "delete_selection", "normal_mode"]
C = ["goto_line_start", "extend_to_line_bounds", "change_selection"]
"%" = "match_brackets"
S = "surround_add"                                                   # Basically 99% of what I use vim-surround for
u = ["switch_to_lowercase", "collapse_selection", "normal_mode"]
U = ["switch_to_uppercase", "collapse_selection", "normal_mode"]

# Visual-mode specific muscle memory
i = "select_textobject_inner"
a = "select_textobject_around"

# Some extra binds to allow us to insert/append in select mode because it's nice with multiple cursors
tab = [
  "insert_mode",
  "collapse_selection",
] # tab is read by most terminal editors as "C-i"
C-a = ["append_mode", "collapse_selection"]

# Make selecting lines in visual mode behave sensibly
k = ["extend_line_up", "extend_to_line_bounds"]
j = ["extend_line_down", "extend_to_line_bounds"]

# Escape the madness! No more fighting with the cursor! Or with multiple cursors!
esc = ["collapse_selection", "keep_primary_selection", "normal_mode"]

# c = ["trim_selections", "change_selection"] # when changing a line this stops the cursor moving to the beginning of the line underneath


## PARKING LOT - Notes, Experiments etc ##
# weird https://github.com/helix-editor/helix/discussions/8052
# weird https://github.com/helix-editor/helix/discussions/8052
# [keys.normal.","]
# d=["save_selection", "extend_to_line_bounds", "yank", "paste_before", "jump_backward" ]
# D=["save_selection", "extend_to_line_bounds", "toggle_comments", "yank", "paste_before", "jump_backward","toggle_comments" ]

# experimental file picker hack
# C-f = [":new", ":insert-output lf-pick", ":theme default", "select_all", "split_selection_on_newline", "goto_file", "goto_last_modified_file", ":buffer-close!", ":theme catppuccin_mocha"]

## GPT requires an openapi key
# GPT integration for normal mode?
# C-n = [
#   "extend_line",
#   ":insert-output echo 'FILL_THIS'",
#   "extend_line_below",
#   ":pipe sgpt --code --no-cache 'Using this comment, fill the line having the comment FILL_THIS.'",
# ]

# GTP Integration for insert mode
# C-n = [
#   "normal_mode",
#   "extend_line",
#   ":insert-output echo 'FILL_THIS'",
#   "extend_line_below",
#   ":pipe sgpt --code --no-cache 'Using this comment, fill the line having the comment FILL_THIS.'",
# ]
